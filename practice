#2/15
#Define a function is_even that will take a number x as input.
#If x is even, then return True.
#Otherwise, return False.
def is_even(x):
  if x % 2 == 0:
    return True
  else:
    return False
  
print is_even(5)
print is_even(6)


#3/15
#An integer is just a number without a decimal part (for instance, -17, 0, and 42 are all integers, but 98.6 is not).
#For the purpose of this lesson, we’ll also say that a number with a decimal part that is all 0s is also an integer, such as 7.0.
#This means that, for this lesson, you can’t just test the input to see if it’s of type int.
#If the difference between a number and that same number rounded is greater than zero, what does that say about that particular number?
#Define a function is_int that takes a number x as an input.
#Have it return True if the number is an integer (as defined above) and False otherwise.

def is_int(x):
  absolute = abs(x)
  rounded = round(absolute)
  return absolute - rounded == 0

print is_int(10)
print is_int(10.5)


#4/15
#Write a function called digit_sum that takes a positive integer n as input and returns the sum of all that number’s digits. 
#For example: digit_sum(1234) should return 10 which is 1 + 2 + 3 + 4. (Assume that the number you are given will always be positive.)

def digit_sum(n):
  total = 0
  string_n = str(n)
  for char in string_n:
    total += int(char)
  return total

#Alternate Solution:

#def digit_sum(n):
#  total = 0
#  while n > 0:
#    total += n % 10
#    n = n // 10
#  return total
  
print digit_sum(1234)


#5/15
#To calculate the factorial of a non-negative integer x, just multiply all the integers from 1 through x. For example:
#factorial(4) would equal 4 * 3 * 2 * 1, which is 24.
#factorial(1) would equal 1.
#factorial(3) would equal 3 * 2 * 1, which is 6.
#Define a function factorial that takes an integer x as input.
#Calculate and return the factorial of that number.

def factorial(x):
    total = 1
    while x>0:
      total *= x
      x-=1
    return total
  
print factorial(5)


#6/15
#A prime number is a positive integer greater than 1 that has no positive divisors other than 1 and itself. (That’s a mouthful!)
#In other words, if you want to test if a number in a variable x is prime, then no other number should go into x evenly besides 1 
#and x. So 2 and 5 and 11 are all prime, but 4 and 18 and 21 are not.
#If there is a number between 1 and x that goes in evenly, then x is not prime.
#Define a function called is_prime that takes a number x as input.
#For each number n from 2 to x - 1, test if x is evenly divisible by n.
#If it is, return False.
#If none of them are, then return True.

def is_prime(x):
    if x < 2:
        return False
    else:
        for n in range(2, x-1):
            if x % n == 0:
                return False
        return True

print is_prime(13)
print is_prime(10)


#7/15
#Define a function called reverse that takes a string textand returns that string in reverse. 
#For example: reverse("abcd") should return "dcba".
#You may not use reversed or [::-1] to help you with this.
#You may get a string containing special characters (for example, !, @, or #).

def reverse(text):
    word = ""
    l = len(text) - 1
    while l >= 0:
        word = word + text[l]
        l -= 1
    return word
  
print reverse("Hello World")


#8/15
#Define a function called anti_vowel that takes one string, text, as input and returns the text with all of the vowels removed.
#For example: anti_vowel("Hey You!") should return "Hy Y!". Don’t count Y as a vowel. Make sure to remove 
#lowercase and uppercase vowels.
def anti_vowel(text):
    result = ""
    vowels = "ieaouIEAOU"
    for char in text:
          if char not in vowels:
            result += char
    return result
print anti_vowel("hello book")


def anti_vowel2(text):  # this removes all but vowels
  word = ""
  v = "AEIOUaeiou"
  for char in text:
    if char in v:
      word += char
  return word

print anti_vowel2("Hello World!")


#9/15
#Scrabble is a game where players get points by spelling words. Words are scored by adding together the point values of 
#each individual letter (we’ll leave out the double and triple letter and word scores for now).
#To the right is a dictionary containing all of the letters in the alphabet with their corresponding Scrabble point values.
#For example: the word "Helix" would score 15 points due to the sum of the letters: 4 + 1 + 1 + 1 + 8.
#Define a function scrabble_score that takes a string word as input and returns the equivalent scrabble score for that word.
#Assume your input is only one word containing no spaces or punctuation.
#As mentioned, no need to worry about score multipliers!
#Your function should work even if the letters you get are uppercase, lowercase, or a mix.
#Assume that you’re only given non-empty strings.

score = {"a": 1, "c": 3, "b": 3, "e": 1, "d": 2, "g": 2, 
         "f": 4, "i": 1, "h": 4, "k": 5, "j": 8, "m": 3, 
         "l": 1, "o": 1, "n": 1, "q": 10, "p": 3, "s": 1, 
         "r": 1, "u": 1, "t": 1, "w": 4, "v": 4, "y": 4, 
         "x": 8, "z": 10}
         
def scrabble_score(word):
  word = word.lower()
  total = 0
  for letter in word:
    for l in score:
      if letter == l:
        total = total + score[l]
  return total

print scrabble_score("pizza")


#10/15
#Write a function called censor that takes two strings, text and word, as input. 
#It should return the text with the word you chose replaced with asterisks. For example:
#censor("this hack is wack hack", "hack") ```
#should return: 
#```py
#"this **** is wack ****"
#Assume your input strings won’t contain punctuation or upper case letters.
#The number of asterisks you put should correspond to the number of letters in the censored word.

def censor(text, word):
    words = text.split()
    result = ""
    stars = "*" * len(word)
    count = 0
    for i in words:
        if i == word:
            words[count] = stars
        count += 1
    result =" ".join(words)

    return result
  
print censor("this hack is wack hack", "hack")



#11/15
#Define a function called count that has two arguments called sequence and item.
#Return the number of times the item occurs in the list.
#For example: count([1, 2, 1, 1], 1) should return 3 (because 1 appears 3 times in the list).
#There is a list method in Python that you can use for this, but you should do it the long way for practice.
#Your function should return an integer.
#The item you input may be an integer, string, float, or even another list!
#Be careful not to use list as a variable name in your code—it’s a reserved word in Python!
numbers = [1, 2, 1, 1, 2]


def count(sequence, item):
    count = 0
    for i in sequence:
        if i == item:
            count += 1
    return count
  
print count(numbers, 2)


#12/15
#Define a function called purify that takes in a list of numbers, removes all odd numbers in the list, 
#and returns the result. For example, purify([1,2,3]) should return [2].
#Do not directly modify the list you are given as input; instead, return a new list with only the even numbers.
#your code should share something in common with the is_even function you defined earlier.

numbers = [1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10]

def purify(x):
    result = []
    for num in x:
        if num % 2 == 0:
            result.append(num)
    return result
  
print purify(numbers)


#13/15
#Define a function called product that takes a list of integers as input and returns the product of all of 
#the elements in the list. For example: product([4, 5, 5]) should return 100 (because 4 * 5 * 5 is 100).
#Don’t worry about the list being empty.
#Your function should return an integer.
#You can use a loop to go through the elements of the list.
#It’ll probably be useful to use the *= operator.
#Be careful not to start your total at 0, as this would make the overall result of the multiplication 
#equal to 0! (Anything multiplied by zero equals zero.)

numbers = [4,5,5]

# alternative solution
"""def product(list):
  result = 1
  for num in list:
    result = result * num
  return result

print product(numbers)"""




def product(x):
  result = 1
  for num in x:
    result = result * num    
  return result


print product(numbers)


#14/15
#Write a function remove_duplicates that takes in a list and removes elements of the list that are the same.
#For example: remove_duplicates([1, 1, 2, 2]) should return [1, 2].
#Don’t remove every occurrence, since you need to keep a single occurrence of a number.
#The order in which you present your output does not matter. So returning [1, 2, 3] is the same as returning [3, 1, 2].
#Do not modify the list you take as input! Instead, return a new list.
#The easiest way to approach this problem is to create a new list in your function, loop through your input list, and 
#add items from your input list to your new list if the current item is not already contained in your new list. Using 
#the a not in b syntax might help you here.
#Also, note that destructively modifying a list while you are looping through it is bad practice and will likely lead
#to bugs somewhere down the line! That’s why we always make a fresh copy to work on.
numbers = [1,1,1,2,2,2,3,3,5,5,6,7,8,5,1,2,5,6,4,6,4,5,6]

""""def remove_duplicates(inputlist):
    if inputlist == []:
        return []
    
    # Sort the input list from low to high    
    inputlist = sorted(inputlist)
    # Initialize the output list, and give it the first value of the now-sorted input list
    outputlist = [inputlist[0]]

    # Go through the values of the sorted list and append to the output list
    # ...any values that are greater than the last value of the output list
    for i in inputlist:
        if i > outputlist[-1]:
            outputlist.append(i)
        
    return outputlist
  
print remove_duplicates(numbers)"""

def remove_dup(x):
  if x == []:
    return []
  
  # sort through list
  x = sorted(x)
  
  # initialize output y
  y = [x[0]]
  
  for num in x:
    if num > y[-1]:
      y.append(num)
  return y

print remove_duplicates(numbers)



#15/15
#Great work! You’ve covered a lot in these exercises. Last but not least, let’s write a function to find the median of a list.
#The median is the middle number in a sorted sequence of numbers.
#Finding the median of [7, 12, 3, 1, 6] would first consist of sorting the sequence into [1, 3, 6, 7, 12] and then locating the middle
#value, which would be 6.
#If you are given a sequence with an even number of elements, you must average the two elements surrounding the middle.
#For example, the median of the sequence [7, 3, 1, 4] is 3.5, since the middle elements after sorting the list are 3 and 4 and (3 + 4)
#/ (2.0) is 3.5.
#You can sort the sequence using the sorted() function, like so:
#sorted([5, 2, 3, 1, 4])
#[1, 2, 3, 4, 5]
#Write a function called median that takes a list as an input and returns the median value of the list. For example: 
#median([1, 1, 2]) should return 1.
#The list can be of any size and the numbers are not guaranteed to be in any particular order. Make sure to sort it!
#If the list contains an even number of elements, your function should return the average of the middle two.
#In order to find the median of a list with an even number of elements, you’re going to need to find the indices of the middle 
#two elements.
#You can find the middle two elements by halving the length of the array to find the index of the first element, and subtracting 
#one from the first index to find the second index.
#For example, with an array of length 6 like [0, 1, 2, 3, 4, 5], the two middle elements that need to be averaged in order find 
#the median would be 2 and 3. You get 3 by cutting the length of the array in half and 2 by subtracting 1 from the previous 
#index: 3. You can use a similar pattern to find the middle element of an odd-length list.
#Last but not least, note that (2 + 3) / 2 is not the same as (2 + 3) / 2.0! The former is integer division, meaning Python will 
#try to give you an integer back. You’ll want a float, so something like (2 + 3) / 2.0 is the way to go.

numbers = [2,3,5,6,7] # try removing the 5 as well should work both ways

def median(list):
    sorted_list = sorted(list)
    if len(sorted_list) % 2 != 0:
        #odd number of elements
        index = len(sorted_list)//2 
        return sorted_list[index]
    elif len(sorted_list) % 2 == 0:
        #even no. of elements
        index_1 = len(sorted_list)/2 - 1
        index_2 = len(sorted_list)/2
        mean = (sorted_list[index_1] + sorted_list[index_2])/2.0
        return mean
   
print median(numbers)
